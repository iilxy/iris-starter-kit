// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// data/templates/react.html
// data/templates/templates_dev.go
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _reactHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x6b\xe3\x38\x10\x7e\x2f\xf4\x7f\x98\x53\x39\xda\x40\x1c\x27\xe5\x1a\x0e\x47\x0e\x1c\x6d\x8f\xeb\xd1\x6e\x17\x9a\x3e\x2c\xcb\x3e\xc8\xd2\x24\xd6\x56\x96\x84\x24\xa7\xc9\x16\xff\xef\x8b\xe3\x24\xb5\xd3\xee\xc2\xc2\x12\x88\xa5\x4f\xf3\xe3\xd3\x37\xa3\xa1\x7f\x5c\xdd\x5f\xce\x3e\x7d\xbc\x86\x3c\x14\x6a\x7a\x7c\x44\xeb\x2f\x08\x16\x58\x54\x96\x52\xa4\xe4\xe5\x05\x06\x8f\x8f\x37\x57\x50\x55\x64\x7a\x7c\x04\x40\x73\x64\x62\xb3\x02\xa0\x05\x06\x06\x3c\x67\xce\x63\x48\xc9\xe3\xec\xdf\xe8\x6f\xb2\x3b\x53\x52\x3f\x81\x43\x95\x12\x1f\xd6\x0a\x7d\x8e\x18\x08\xe4\x0e\xe7\x29\x89\x7d\x60\x41\xf2\x38\x2b\xa5\x12\x71\x56\x6a\xa1\x70\xc0\xbd\xdf\x39\xd7\x59\xff\x9b\xdd\xdd\xce\x64\x50\x08\x55\xd5\x45\xef\xea\xac\x0d\x48\xe3\x3d\x1d\x9a\x19\xb1\xde\xfb\xcb\x39\x0c\xae\x9d\x33\x6e\xe7\x0c\x40\x85\x5c\xee\xd6\x00\x5c\x31\xef\x53\x82\xb5\x0d\x79\x85\x37\x5c\xd3\x16\x00\xf0\x2c\x45\xc8\x13\xb8\x18\xfe\x39\x69\xc3\xd6\x78\x19\xa4\xd1\x09\xb0\xcc\x1b\x55\x06\xec\x1c\x07\x63\x13\x18\x0d\xed\xaa\x83\x2a\x9c\x87\x77\x60\x63\x19\x97\x61\x9d\xc0\xe0\xa2\x83\x73\xa3\x8c\x4b\xe0\x64\x3c\x1e\x77\xf0\xcc\x38\x81\x2e\x81\x73\xbb\x02\x6f\x94\x14\x70\x32\xcf\xce\xf9\x68\xd8\xb5\x62\xfc\x69\xe1\x4c\xa9\x45\x02\x6e\x91\xb1\xb3\x61\xbf\xfe\x0d\x46\xbd\x8e\xd9\xdc\xe8\x10\xcd\x59\x21\xd5\x3a\x29\x8c\x66\xdc\xf4\xe1\xd2\x68\x6f\x14\xf3\x7d\xb8\x2d\xb9\x14\x6c\x0b\x60\x1f\x0a\xa3\x8d\xb7\x8c\xe3\x81\x18\x52\x07\x74\x11\x2e\x51\x07\x9f\x80\x36\x1a\x27\x2d\x15\xa7\x6d\x63\x9a\x95\x21\x18\xdd\x86\xf6\xc2\x5b\x26\x84\xd4\x8b\x46\xa3\xe6\x6f\xd8\xe8\x75\x98\x82\x95\xc1\x4c\x1a\xf2\x5e\x7e\xc3\x04\x46\x63\xbb\x22\xdd\xa0\x46\x73\x25\xf9\x53\x4a\x42\x2e\xfd\xc0\x32\x87\x3a\x5c\x2b\x2c\x50\x87\x83\x9d\xc3\xc2\x2c\xf1\x32\x97\x4a\x9c\xbd\x35\xee\x75\xe2\x4e\xbb\x49\x1e\xd0\x2d\xd1\xc1\xa6\xdb\x12\x68\x3d\x98\xce\x9d\xe3\xe6\xd2\x2d\x5f\x9a\xbb\xf7\xda\x2d\x47\xb9\xc8\x43\x02\x87\x3d\xb2\xab\xf9\x46\xda\xb7\x07\x51\x66\x42\x30\xc5\xcf\x7b\x82\xc4\xed\xfc\xd6\xe1\x8e\xc0\xef\xe8\x81\x76\x29\xfe\xb2\xab\x09\xec\x6b\x39\x7c\xad\xe6\x04\x0a\xe6\x16\x52\x27\x30\x24\xd3\x5a\xab\x8d\x6c\x50\x55\x34\xb6\x0e\xf7\xec\x68\x2c\xe4\x72\xff\x98\x51\x8b\x9d\x9a\xf5\x23\x86\x7a\x30\x31\x6b\x9b\x00\xf5\x44\xf8\xc7\xda\x4d\x88\x57\x27\xea\xb9\x93\x36\x80\xd1\xca\x30\xf1\x6e\x03\x1c\x96\xbc\x47\xa6\xcf\x52\x0b\xf3\xfc\xf9\x34\x8a\x98\xb5\x91\xd4\x32\x48\xa6\x4e\xbf\x40\x0a\xff\x3f\xdc\x7f\xa8\xfd\x3d\x9e\x91\x66\xba\xdc\x34\xa7\x55\x55\x93\xd8\x6e\xa0\xde\xa1\xf2\x58\x55\x2f\xd5\x96\x37\xe9\x4d\x68\xdc\xb0\x39\xe0\xc6\xfc\x5a\x73\x10\x38\x47\x07\xde\xf1\x1f\x8c\xc5\xaf\x9e\xfc\xe2\x2d\x3a\xe9\x68\xbc\x9d\x8b\x34\xde\xce\xf8\xef\x01\x00\x00\xff\xff\x27\x4d\x77\xf4\xf5\x05\x00\x00")

func reactHtmlBytes() ([]byte, error) {
	return bindataRead(
		_reactHtml,
		"react.html",
	)
}

func reactHtml() (*asset, error) {
	bytes, err := reactHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "react.html", size: 1525, mode: os.FileMode(438), modTime: time.Unix(1600024685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_devGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x5b\x6a\x03\x31\x0c\x45\xbf\x6b\xf0\x1e\x6e\xe7\x2b\xa1\x30\x5e\x43\xa1\x74\x03\x5d\x81\x1a\x6b\x12\x11\x5b\x36\xb2\xa6\x0f\x4a\xf7\x5e\xdc\x40\xfe\x0e\xf7\x5c\x4e\x4a\x78\x7a\xdf\xa5\x64\xc8\x59\x9b\x71\x0c\x31\xa4\x04\xd9\x90\xf9\x03\x7e\x61\x05\xe5\x3c\x01\xfc\x55\xa8\x92\x4b\x53\x54\xb2\x2b\x1e\x21\x8a\xcd\x9a\x3a\xda\xf6\xff\xb8\x25\xf0\xd9\x2c\xaf\x31\x74\x3a\x5d\xe9\xcc\x70\xae\xbd\x90\xf3\x98\x6d\xa9\xbd\x99\x63\x51\xf6\x74\x71\xef\xcb\x1c\xb7\x5d\x4f\x78\x1e\x83\xfd\x55\x0a\x1f\x8e\x98\x66\x9d\xfc\xf6\x3d\x9c\x2b\x7e\x62\x78\x30\xf6\xdd\xf4\xa6\x5e\xc4\x0e\xcb\x9a\x32\x39\xa5\x7b\x7e\x39\xc6\xf0\x1b\xc3\x5f\x00\x00\x00\xff\xff\xdf\xa5\x0d\x5b\xd2\x00\x00\x00")

func templates_devGoBytes() ([]byte, error) {
	return bindataRead(
		_templates_devGo,
		"templates_dev.go",
	)
}

func templates_devGo() (*asset, error) {
	bytes, err := templates_devGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_dev.go", size: 210, mode: os.FileMode(438), modTime: time.Unix(1600025848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"react.html":       reactHtml,
	"templates_dev.go": templates_devGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"react.html":       {reactHtml, map[string]*bintree{}},
	"templates_dev.go": {templates_devGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
